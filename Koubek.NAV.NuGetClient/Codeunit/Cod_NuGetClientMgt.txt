OBJECT Codeunit 83631 NuGet Client Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=16/02/17;
    Time=11:30:00;
    Modified=Yes;
    Version List=KOUBEK,NGT;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      NuGetCliSetup@1001 : Record 83631;
      DotNetExceptionHandler@1007 : Codeunit 1291;
      PckRepoFact@1002 : DotNet "'NuGet.Core, Version=2.8.60717.93, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.NuGet.PackageRepositoryFactory";
      PckRepo@1004 : DotNet "'NuGet.Core, Version=2.8.60717.93, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.NuGet.IPackageRepository";
      PckSrc@1003 : DotNet "'NuGet.Core, Version=2.8.60717.93, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.NuGet.PackageSource";
      PckMgr@1000 : DotNet "'NuGet.Core, Version=2.8.60717.93, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.NuGet.PackageManager";
      Text001@1005 : TextConst 'ENU=#1###############';
      Text002@1006 : TextConst 'ENU=Repository has not been initialized!';

    LOCAL PROCEDURE "***PUBLICS***"@2();
    BEGIN
    END;

    PROCEDURE GetDefaultPackageInstallationPath@9() RetValO : Text;
    BEGIN
      NuGetCliSetup.GetSetup(TRUE);
      NuGetCliSetup.TESTFIELD("Installation Subpath");
      RetValO := GetPackageInstallationPath(NuGetCliSetup."Installation Subpath");
      EXIT(RetValO);
    END;

    PROCEDURE GetPackageInstallationPath@8(SubpathP@1000 : Text) RetValO : Text;
    VAR
      AssL@1001 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Reflection.Assembly";
    BEGIN
      //AssL.GetExecutingAssembly().
      RetValO := APPLICATIONPATH + SubpathP;
      EXIT(RetValO);
    END;

    PROCEDURE GetPackagesFromDefaultServer@6(VAR NgtPckgEntryP@1003 : Record 83635;VAR NgtPckgEntryVersionP@1002 : Record 83636;VAR NetPckgListP@1004 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.IList`1";PckFilterP@1000 : Text);
    VAR
      NgtSrvL@1001 : Record 83632;
    BEGIN
      NuGetCliSetup.GetSetup(TRUE);
      NuGetCliSetup.TESTFIELD("Default Server Code");

      GetPackagesByNgtSrvCode(NgtPckgEntryP,NgtPckgEntryVersionP,NetPckgListP,NuGetCliSetup."Default Server Code",PckFilterP);
    END;

    [TryFunction]
    PROCEDURE GetPackagesByNgtSrvCode@5(VAR NgtPckgEntryP@1003 : Record 83635;VAR NgtPckgEntryVersionP@1004 : Record 83636;VAR NetPckgListP@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.IList`1";NgtCodeP@1002 : Code[20];PckFilterP@1000 : Text);
    VAR
      NuGetRepoL@1001 : Record 83632;
      ExceptionL@1006 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Exception";
    BEGIN
      NuGetRepoL.GET(NgtCodeP);
      NuGetRepoL.TESTFIELD(Active,TRUE);

      IF NOT GetPackagesByUrl(NgtPckgEntryP,NgtPckgEntryVersionP,NetPckgListP,NuGetRepoL.GetUrl,PckFilterP) THEN BEGIN
        DotNetExceptionHandler.Collect;
        IF DotNetExceptionHandler.TryCastToType(ExceptionL) THEN
          MESSAGE(ExceptionL.Message)
        ELSE
          DotNetExceptionHandler.Rethrow;
      END;
    END;

    [TryFunction]
    PROCEDURE GetPackagesByUrl@3(VAR NgtPckgEntryP@1003 : Record 83635;VAR NgtPckgEntryVersionP@1008 : Record 83636;VAR NetPckgListP@1009 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.IList`1";RepoUrlP@1002 : Text;PckFilterP@1000 : Text);
    VAR
      PckL@1001 : DotNet "'NuGet.Core, Version=2.8.60717.93, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.NuGet.IPackage";
      VersionL@1006 : DotNet "'NuGet.Core, Version=2.8.60717.93, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.NuGet.SemanticVersion";
      NetPckgListL@1010 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.IList`1";
      WndL@1004 : Dialog;
      CountL@1005 : Integer;
      CounterL@1007 : Integer;
    BEGIN
      NuGetCliSetup.GetSetup(FALSE);
      InitRepoVariables(RepoUrlP);

      NgtPckgEntryP.RESET;
      NgtPckgEntryP.DELETEALL;

      NgtPckgEntryVersionP.RESET;
      NgtPckgEntryVersionP.DELETEALL;

      //CountL :=
      WndL.OPEN(Text001);

      IF (NOT ISNULL(PckRepo)) THEN BEGIN
        NetPckgListL := PckRepo.GetPackages;

        //FOREACH PckL IN PckRepo.GetPackages DO BEGIN
        FOREACH PckL IN NetPckgListL DO BEGIN
          CounterL += 1;

          VersionL := PckL.Version;

          NgtPckgEntryP.INIT;
          NgtPckgEntryP."Package ID" := COPYSTR(PckL.Id,1,MAXSTRLEN(NgtPckgEntryP."Package ID"));
          NgtPckgEntryP.Title := COPYSTR(PckL.Title,1,MAXSTRLEN(NgtPckgEntryP.Title));
          NgtPckgEntryP.Description := COPYSTR(PckL.Description,1,MAXSTRLEN(NgtPckgEntryP.Description));
          IF NOT NgtPckgEntryP.INSERT THEN NgtPckgEntryP.MODIFY;

          NgtPckgEntryVersionP.INIT;
          NgtPckgEntryVersionP."Package ID" := NgtPckgEntryP."Package ID";
          NgtPckgEntryVersionP.Version := VersionL.ToNormalizedString;
          NgtPckgEntryVersionP.Title := COPYSTR(PckL.Title,1,MAXSTRLEN(NgtPckgEntryVersionP.Title));
          NgtPckgEntryVersionP.Description := COPYSTR(PckL.Description,1,MAXSTRLEN(NgtPckgEntryVersionP.Description));
          NgtPckgEntryVersionP."Pckg. List Index" := CounterL;
          NgtPckgEntryVersionP.INSERT;

          WndL.UPDATE(1,NgtPckgEntryP."Package ID");

          IF (NuGetCliSetup."Repository Dataset Max. Size" > 0) AND
             (CounterL >= NuGetCliSetup."Repository Dataset Max. Size")
          THEN BEGIN
            WndL.CLOSE;
            EXIT;
          END;

        END;
      END;

      WndL.CLOSE;
    END;

    PROCEDURE InstallPackage@7(PckgIdP@1001 : Text;DestPathP@1000 : Text);
    VAR
      AgrRepoL@1002 : DotNet "'NuGet.Core, Version=2.8.60717.93, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.NuGet.AggregateRepository";
    BEGIN
      TestRepVars();
      CreateAggregateRepo(AgrRepoL);
      //PckMgr := PckMgr.PackageManager(PckRepo,DestPathP);
      PckMgr := PckMgr.PackageManager(AgrRepoL,DestPathP);
      PckMgr.InstallPackage(PckgIdP);
    END;

    PROCEDURE InstallPackageVersion@12(PckgIdP@1001 : Text;VersionP@1002 : Text;DestPathP@1000 : Text);
    VAR
      VersionL@1003 : DotNet "'NuGet.Core, Version=2.8.60717.93, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.NuGet.SemanticVersion";
    BEGIN
      VersionL := VersionL.Parse(VersionP);
      InstallPackageVersion2(PckgIdP,VersionL,DestPathP);
    END;

    PROCEDURE InstallPackageVersion2@11(PckgIdP@1001 : Text;VersionP@1002 : DotNet "'NuGet.Core, Version=2.8.60717.93, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.NuGet.SemanticVersion";DestPathP@1000 : Text);
    VAR
      AgrRepoL@1003 : DotNet "'NuGet.Core, Version=2.8.60717.93, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.NuGet.AggregateRepository";
    BEGIN
      NuGetCliSetup.GetSetup(FALSE);

      TestRepVars();
      CreateAggregateRepo(AgrRepoL);
      //PckMgr := PckMgr.PackageManager(PckRepo,DestPathP);
      PckMgr := PckMgr.PackageManager(AgrRepoL,DestPathP);
      PckMgr.InstallPackage(PckgIdP,VersionP,FALSE,NuGetCliSetup."Allow Pre-releases");
    END;

    LOCAL PROCEDURE "***PRIVATES***"@4();
    BEGIN
      // SECTION SEPARATOR
    END;

    LOCAL PROCEDURE InitRepoVariables@1(RepoUrlP@1000 : Text);
    BEGIN
      PckRepo := PckRepoFact.Default.CreateRepository(RepoUrlP);
    END;

    LOCAL PROCEDURE TestRepVars@13();
    BEGIN
      IF ISNULL(PckRepo) THEN
        ERROR(Text002);
    END;

    LOCAL PROCEDURE CreateAggregateRepo@10(VAR AgrRepoP@1000 : DotNet "'NuGet.Core, Version=2.8.60717.93, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.NuGet.AggregateRepository");
    VAR
      NuGetRepoL@1002 : Record 83632;
      NgtRepoListL@1001 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.List`1";
      PckRepoFactL@1004 : DotNet "'NuGet.Core, Version=2.8.60717.93, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.NuGet.PackageRepositoryFactory";
      PckRepoL@1003 : DotNet "'NuGet.Core, Version=2.8.60717.93, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.NuGet.IPackageRepository";
    BEGIN
      //NgtRepoListL := NgtRepoListL.List;
      SimpleGenericInitializer(NgtRepoListL,PckRepoL);

      NuGetRepoL.SETRANGE(Active,TRUE);
      IF NuGetRepoL.FINDSET THEN
        REPEAT

          CLEAR(PckRepoL);
          CLEAR(PckRepoFactL);

          PckRepoL := PckRepoFactL.Default.CreateRepository(NuGetRepoL.GetUrl);

          NgtRepoListL.Add(PckRepoL);

        UNTIL NuGetRepoL.NEXT = 0;

      AgrRepoP := AgrRepoP.AggregateRepository(NgtRepoListL);
    END;

    LOCAL PROCEDURE SimpleGenericInitializer@14(GenericP@1001 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Object";ObjP@1003 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Object");
    VAR
      TypeL@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Type";
      ArrayL@1002 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      ActivatorL@1004 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Activator";
    BEGIN
      ArrayL := ArrayL.CreateInstance(GETDOTNETTYPE(TypeL),1);
      ArrayL.SetValue(GETDOTNETTYPE(ObjP),0);

      TypeL := GETDOTNETTYPE(GenericP);
      TypeL := TypeL.MakeGenericType(ArrayL);

      GenericP := ActivatorL.CreateInstance(TypeL);
    END;

    EVENT PckMgr@1000::PackageInstalling@34(sender@1001 : Variant;e@1000 : DotNet "'NuGet.Core, Version=2.8.60717.93, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.NuGet.PackageOperationEventArgs");
    BEGIN
    END;

    EVENT PckMgr@1000::PackageInstalled@35(sender@1001 : Variant;e@1000 : DotNet "'NuGet.Core, Version=2.8.60717.93, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.NuGet.PackageOperationEventArgs");
    BEGIN
    END;

    EVENT PckMgr@1000::PackageUninstalling@36(sender@1001 : Variant;e@1000 : DotNet "'NuGet.Core, Version=2.8.60717.93, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.NuGet.PackageOperationEventArgs");
    BEGIN
    END;

    EVENT PckMgr@1000::PackageUninstalled@37(sender@1001 : Variant;e@1000 : DotNet "'NuGet.Core, Version=2.8.60717.93, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.NuGet.PackageOperationEventArgs");
    BEGIN
    END;

    BEGIN
    END.
  }
}
